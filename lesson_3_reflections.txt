When would you want to use a remote repository rather than keeping all your work local?
  
  So that many people can collaborate and contribute to my work. It;s a way of getting it out to the public and 
  getting some exposure.

  
Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Manually pulling changes allows me to determine when code is brought down. This means that code won't change
	unexpectedly without me knowing about it.

	
Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks, clones, and branches are all ways to add new changes without affecting the existing version.  With branches
	the new changes are added in the same repository.  Forking and cloning both copy an entire repository to a new 
	location.  The difference between forking and cloning is that forking is a special construct made by GitHub.  You 
	can only fork a GitHub repository to another location on GitHub, while you can clone any Git repository to 
	anywhere you have access to.
    I use branching for most cases where I want to add new changes to a repository while keeping an easy reference to
	a previous version, especially when collaborating with other people.  I clone a repository on GitHub when I want 
	to work on that repository locally rather than using the GitHub website.  I fork a repository on GitHub when I 
	want to make changes to that repository public, but I don't have permission to modify the original.

	
What is the benefit of having a copy of the last known state of the remote
stored locally?

    You can see that state of the remote even if you're offline. It also allows you to do comparisons with what is on 
	the remote.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    If I had to collaborate on a coding project without using Git or GitHub (or
    any other form of version control designed for code), I might suggest that
    we all make changes to a shared folder, for example, a DropBox folder.  This
    would be a ligter-weight solution than using Git and GitHub.  However, if we
    both wanted to work on the same part of the file, it would be very difficult
    to avoid clobbering each other's changes.

    Real-time collaborative editors like Google Docs are also great for
    collaboration, but I don't know a good version of Google Docs for code.
    Even if I did, I would be hesitant to use this approach on code that it's
    important to keep bug-free.  I would be worried that someone else would add
    a change that combined with my change to make a bug, and I might not even
    notice their change!

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Working in a separate branch ensures that your master branch is
    always kept in a working state. You can try and experiment new
    functionality or algorithm in the new branch untill you are sure
    it works without breaking anything. On the other hand, an obvious
    fix for e.g. easy misspelling would not need much experimenting
    and could be fixed directly in the master branch.